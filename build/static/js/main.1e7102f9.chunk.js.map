{"version":3,"sources":["pages/App/style.css","components/Background/style.css","components/Button/style.css","components/ContentBlock/style.css","fonts/Major_Mono_Display/MajorMonoDisplay-Regular.ttf","components/Background/index.tsx","components/ContentBlock/index.tsx","components/Button/index.tsx","components/NavBar/index.tsx","pages/Contact/index.tsx","pages/Experiments/index.tsx","pages/Me/index.tsx","pages/App/index.tsx","serviceWorker.ts","index.tsx","components/NavBar/style.css"],"names":["module","exports","Background","state","sourceString","sliceOffset","window","setInterval","setState","length","this","text","className","styles","bg","slice","overlay","props","Array","fill","join","React","Component","ContentBlock","children","contentBlock","Button","func","button","onClick","Navbar","activeClassName","to","Contact","Experiments","Me","App","mounted","addEventListener","app","exact","path","href","target","rel","PureComponent","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e7102f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"style_app__1N753\",\"app-header\":\"style_app-header__3aRCC\",\"app-link\":\"style_app-link__gg_F_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bg\":\"style_bg__2MMMf\",\"overlay\":\"style_overlay__D6TVU\",\"text\":\"style_text__3WjkB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"style_button__MTTVa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentBlock\":\"style_contentBlock__20EbZ\"};","module.exports = __webpack_public_path__ + \"static/media/MajorMonoDisplay-Regular.c04d1551.ttf\";","import React from 'react';\nimport styles from './style.css';\n\ninterface IProps {\n  state: 'underconstruction' | 'loading' | 'ready'\n}\n\nclass Background extends React.Component<IProps>{\n\n  readonly state: any = {\n    sourceString: 'loading',\n    sliceOffset: 0\n  }\n\n  static getDerivedStateFromProps(props: IProps) {\n    const sourceString = props.state === 'loading' ? 'loading' : 'underconstruction';\n    return {\n      sourceString,\n      text: new Array(100).fill(sourceString).join('')\n    };\n  }\n\n  componentDidMount(): void {\n    window.setInterval(\n      () => this.setState({\n        sliceOffset:  this.state.sliceOffset > this.state.sourceString.length ? 0 : this.state.sliceOffset + 1\n      }),\n      1000\n    );\n  }\n\n  render(): React.ReactElement {\n    const { sliceOffset, text } = this.state;\n\n    return (\n      <div className={styles.bg}>\n        <div className={styles.text}>\n          {text.slice(sliceOffset)}\n        </div>\n        <div className={styles.overlay}>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default Background;\n","import React from 'react';\nimport styles from './style.css';\n\nfunction ContentBlock ({ children } : { children: React.ReactElement }) {\n  return (\n    <div className={styles.contentBlock}>\n      {children}\n    </div>\n  )\n};\n\nexport default ContentBlock;","import React from 'react';\nimport styles from './style.css';\n\n// This is a stand-in for a simple button component\n\ninterface IButton {\n  children?: React.ReactElement | string;\n  func?: () => void;\n  text?: string;\n}\n\n\nfunction Button ({ children, func, text } : IButton) {\n  return (\n    <button className={styles.button} onClick={func}>\n      { text &&\n        <div className={styles.text}>{text}</div>\n      }\n      {children}\n    </button>\n  )\n};\n\nexport default Button;","import React from 'react';\nimport {\n  NavLink\n} from \"react-router-dom\";\n\nimport styles from './style.css';\n\nexport default function Navbar() {\n  return (\n    <nav className={styles['navigation']}>\n      <ul>\n        <li>\n          <NavLink activeClassName={styles['active']} to=\"/me\">Me</NavLink>\n        </li>\n        <li>\n          <NavLink activeClassName={styles['active']} to=\"/experiments\">Experiments</NavLink>\n        </li>\n        <li>\n          <NavLink activeClassName={styles['active']} to=\"/contact\">Contact</NavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n}","import React from 'react';\n\nexport default function Contact () {\n  return (\n    <div>Contact</div>\n  )\n}","import React from 'react';\n\nexport default function Experiments () {\n  return (\n    <div>Experiments</div>\n  );\n}","import React from 'react';\n\nexport default function Me () {\n return (<div>Me</div>);\n}","import React from 'react';\nimport styles from './style.css';\nimport Background from '../../components/Background';\nimport GlobalLoading from '../../components/GlobalLoading';\nimport ContentBlock from '../../components/ContentBlock';\nimport Button from '../../components/Button';\nimport NavBar from '../../components/NavBar';\n\nimport Contact from '../Contact';\nimport Experiments from '../Experiments';\nimport Me from '../Me';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n// loading state in background?\nclass App extends React.PureComponent {\n\n  state = {\n    mounted: false\n  }\n\n  componentDidMount() {\n    window.addEventListener('load', () => this.setState({ mounted: true }));\n  }\n\n  render() {\n    return (\n      <div className={styles.app}>\n        <Router>\n          <NavBar />\n          <Switch>\n            <Route exact path=\"/\">\n              <Redirect to=\"/me\" />\n            </Route>\n            <Route exact path=\"/me\">\n              <Me />\n            </Route>\n            <Route path=\"/contact\">\n              <Contact />\n            </Route>\n            <Route path=\"/experiments\">\n              <Experiments />\n            </Route>\n          </Switch>\n        </Router>\n        <ContentBlock>\n          <header className={styles['app-header']}>\n            <h1>HELLO</h1>\n            <p>\n              This is a website of Levon Barsegjan.\n            </p>\n            <p>\n              It is currently under construction.\n            </p>\n            <a\n              className={styles['app-link']}\n              href=\"https://github.com/SteelSatsuma/itslevo.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <Button>\n              Github\n              </Button>\n            </a>\n          </header>\n        </ContentBlock>\n        <Background state={this.state.mounted ? 'underconstruction' : 'loading'} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport './fonts/Major_Mono_Display/MajorMonoDisplay-Regular.ttf';\n\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"style_navigation__2twnF\",\"active\":\"style_active__2rLdw\"};"],"sourceRoot":""}